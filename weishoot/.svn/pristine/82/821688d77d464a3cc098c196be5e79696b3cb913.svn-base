
package com.NationalPhotograpy.weishoot.fragment;

import java.io.File;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;

import com.NationalPhotograpy.weishoot.R;
import com.NationalPhotograpy.weishoot.activity.MainActivity;
import com.NationalPhotograpy.weishoot.activity.photograph.WeiShootWebActiivty;
import com.NationalPhotograpy.weishoot.activity.registered.LoginActivity;
import com.NationalPhotograpy.weishoot.activity.shouye.UserInfoDetialActivity;
import com.NationalPhotograpy.weishoot.adapter.HomeAdapter;
import com.NationalPhotograpy.weishoot.bean.AdvertisingBean;
import com.NationalPhotograpy.weishoot.bean.AdvertisingBean.ADBean;
import com.NationalPhotograpy.weishoot.bean.ReqUploadBean;
import com.NationalPhotograpy.weishoot.bean.TopCommentBean;
import com.NationalPhotograpy.weishoot.bean.TopicBean;
import com.NationalPhotograpy.weishoot.bean.UploadResultBean;
import com.NationalPhotograpy.weishoot.net.HttpUrl;
import com.NationalPhotograpy.weishoot.storage.Constant;
import com.NationalPhotograpy.weishoot.storage.SharePreManager;
import com.NationalPhotograpy.weishoot.storage.StaticInfo;
import com.NationalPhotograpy.weishoot.utils.DimensionPixelUtil;
import com.NationalPhotograpy.weishoot.utils.StringsUtil;
import com.NationalPhotograpy.weishoot.utils.WeiShootToast;
import com.NationalPhotograpy.weishoot.utils.UserInfo.UserInfo;
import com.NationalPhotograpy.weishoot.view.ProgressiveDialog;
import com.NationalPhotograpy.weishoot.view.adcyclegallery.HomeAdCycleGallery;
import com.NationalPhotograpy.weishoot.view.adcyclegallery.HomeAdCycleGalleryAdapter;
import com.NationalPhotograpy.weishoot.view.pullrefresh.PullToRefreshBase;
import com.NationalPhotograpy.weishoot.view.pullrefresh.PullToRefreshListView;
import com.NationalPhotograpy.weishoot.view.zxing.MipcaCaptureActivity;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;

/**
 * 首页
 */
public class FragmentHome extends Fragment implements OnClickListener, OnItemSelectedListener {

    private Button btn_left;

    private ImageView btn_right;

    private PullToRefreshListView lv_pulltorefresh;

    private ListView homeListView;

    private HomeAdapter homeAdapter;

    private String lastDataTime = "";

    private ProgressiveDialog progressDialog;

    private HomeAdCycleGallery gallery_ad;

    private HomeAdCycleGalleryAdapter adCycleGalleryAdapter;

    private LinearLayout layout_pointAll;

    private AdvertisingBean advertisingBean;

    private BroadcastReceiver receiver;

    private ProgressBar mProgressBar;

    private boolean isFinish;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View createView = inflater.inflate(R.layout.fragment_home, null, false);
        initView(createView);
        initData();
        setListener();
        return createView;
    }

    private void initView(View createView) {
        progressDialog = new ProgressiveDialog(getActivity());
        mProgressBar = (ProgressBar) createView.findViewById(R.id.mProgressBar);
        btn_left = (Button) createView.findViewById(R.id.btn_left);
        btn_right = (ImageView) createView.findViewById(R.id.btn_right);
        lv_pulltorefresh = (PullToRefreshListView) createView.findViewById(R.id.lv_pulltorefresh);
        homeListView = lv_pulltorefresh.getRefreshableView();
        receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context arg0, Intent arg1) {
                if ("logout".equals(arg1.getAction())) {
                    lastDataTime = "";
                    requestGetTopic();
                } else if ("comment".equals(arg1.getAction())) {
                    if (homeAdapter != null) {
                        TopCommentBean bean = (TopCommentBean) arg1.getSerializableExtra("data");
                        int position = arg1.getIntExtra("position", -1);
                        if (position != -1) {
                            homeAdapter.data.get(position).CommentList.add(0, bean);
                            homeAdapter.notifyDataSetChanged();
                        }

                    }

                }

            }
        };

        IntentFilter filter = new IntentFilter("logout");
        filter.addAction("comment");
        getActivity().registerReceiver(receiver, filter);
    }

    @Override
    public void onResume() {
        super.onResume();
        if (UserInfo.getInstance(getActivity()).isLogin()) {
            ImageLoader.getInstance().displayImage(
                    UserInfo.getInstance(getActivity()).getUserHead(),
                    btn_right,
                    new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisc(true)
                            .displayer(new RoundedBitmapDisplayer(100))
                            .showImageForEmptyUri(R.drawable.default_head).build());
        } else {
            btn_right.setImageResource(R.drawable.default_head);
        }
        if ("upload".equals(MainActivity.intentRequest)) {
            MainActivity.intentRequest = "";
            requestAddTopic(MainActivity.uploadBean);
            // UploadResultBean resultBean = MainActivity.resultBean;
            // if (resultBean != null && resultBean.data != null && homeAdapter
            // != null) {
            // homeAdapter.addData(resultBean.data);
            // ((MainActivity) getActivity()).resultBean = null;
            // }
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        getActivity().unregisterReceiver(receiver);
    }

    private void initData() {
        initCacheData();
        requestGetTopic();
        requestGetAd();

    }

    private void initCacheData() {
        String json = SharePreManager.getInstance(getActivity()).getString("home_topic_json");
        if (json != null) {
            TopicBean topicBean = new Gson().fromJson(json, new TypeToken<TopicBean>() {
            }.getType());
            homeAdapter = new HomeAdapter(getActivity(), topicBean.data, homeListView);
            homeListView.setAdapter(homeAdapter);
        }
    }

    private void setListener() {
        btn_left.setOnClickListener(this);
        btn_right.setOnClickListener(this);
        lv_pulltorefresh.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {

            @Override
            public void onPullDownToRefresh() {
                // 刷新
                lastDataTime = "";
                requestGetTopic();
            }

            @Override
            public void onPullUpToRefresh() {
                // 加载
                requestGetTopic();
            }
        });
    }

    @Override
    public void onClick(View v) {
        Intent it;
        switch (v.getId()) {
            case R.id.btn_left:
                it = new Intent(getActivity(), MipcaCaptureActivity.class);
                startActivity(it);
                break;
            case R.id.btn_right:
                if (UserInfo.getInstance(getActivity()).isLogin()) {
                    it = new Intent(getActivity(), UserInfoDetialActivity.class);
                    it.putExtra(UserInfoDetialActivity.ARG_UCODE,
                            UserInfo.getInstance(getActivity()).getUserUCode());
                    it.putExtra(UserInfoDetialActivity.ARG_NIKENAME,
                            UserInfo.getInstance(getActivity()).getUserNickName());
                    it.putExtra(UserInfoDetialActivity.ARG_USERHEAD,
                            UserInfo.getInstance(getActivity()).getUserHead());
                    startActivity(it);
                } else {
                    it = new Intent(getActivity(), LoginActivity.class);
                    startActivity(it);
                }

                break;
            default:
                break;
        }
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        refreshPointView(position % advertisingBean.data.size());
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {

    }

    private void addPointView(int size) {
        layout_pointAll.removeAllViews();
        int buttonW = (int) DimensionPixelUtil.getDimensionPixelSize(1, 7, getActivity());
        int buttonH = (int) DimensionPixelUtil.getDimensionPixelSize(1, 7, getActivity());
        LinearLayout.LayoutParams lyp = new LinearLayout.LayoutParams(buttonW, buttonH);
        lyp.setMargins(0, 0, 10, 0);
        for (int i = 0; i < size; i++) {
            ImageView imageView = new ImageView(getActivity());
            imageView.setLayoutParams(lyp);
            imageView.setBackgroundResource(R.drawable.selector_point);
            layout_pointAll.addView(imageView);
        }
        refreshPointView(0);
    }

    private void refreshPointView(int position) {
        if (advertisingBean.data != null) {
            for (int i = 0; i < advertisingBean.data.size(); i++) {
                ImageView imageView = (ImageView) layout_pointAll.getChildAt(i);
                if (i == position) {
                    imageView.setEnabled(false);
                } else {
                    imageView.setEnabled(true);
                }
            }
        }
    }

    private void progressLoading() {
        mProgressBar.setVisibility(View.VISIBLE);
        mProgressBar.setProgress(0);
        isFinish = false;
        new Thread() {
            @Override
            public void run() {
                for (int i = 1; i <= 90; i++) {
                    if (isFinish) {
                        break;
                    }
                    try {
                        mProgressBar.setProgress(i);
                        Thread.sleep(500);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();
    }

    private void progressLoadingClose() {
        isFinish = true;
        mProgressBar.setProgress(100);
        progressHandler.sendEmptyMessageDelayed(1, 500);

    }

    private Handler progressHandler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            mProgressBar.setVisibility(View.GONE);
        };
    };

    /**
     * 获取首页主题
     */
    private void requestGetTopic() {
        progressDialog.show();
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("UCode", UserInfo.getInstance(getActivity()).getUserUCode());
        params.addBodyParameter("PageSize", "5");
        params.addBodyParameter("DisplayCom", "5");
        params.addBodyParameter("DisplayGood", "5");
        params.addBodyParameter("CurrentUCode", UserInfo.getInstance(getActivity()).getUserUCode());
        // params.addBodyParameter("TType", "");
        params.addBodyParameter("CreateDate", lastDataTime);
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.GetTopic, params, new RequestCallBack<Object>() {

            @Override
            public void onFailure(HttpException e, String s) {
                e.printStackTrace();
                if (getActivity() == null) {
                    return;
                }
                progressDialog.dismiss();
                WeiShootToast.makeErrorText(getActivity(), getString(R.string.http_timeout),
                        WeiShootToast.LENGTH_SHORT).show();
            }

            @Override
            public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                if (getActivity() == null) {
                    return;
                }
                lv_pulltorefresh.onRefreshComplete();
                progressDialog.dismiss();
                String temp = (String) objectResponseInfo.result;
                Log.v("TAG", "wwwww" + temp);
                TopicBean topicBean = new Gson().fromJson(temp, new TypeToken<TopicBean>() {
                }.getType());
                if (topicBean != null && topicBean.result != null) {
                    if ("200".equals(topicBean.result.ResultCode)) {
                        SharePreManager.getInstance(getActivity()).setString("home_topic_json",
                                temp);
                        if (homeAdapter != null && "".equals(lastDataTime)) {// 刷新操作
                            homeAdapter.data.clear();
                            homeAdapter.indexZans.clear();
                            homeAdapter.indexShouCangs.clear();
                        }
                        if (homeAdapter != null) {
                            homeAdapter.addData(topicBean.data);
                        } else {
                            homeAdapter = new HomeAdapter(getActivity(), topicBean.data,
                                    homeListView);
                            homeListView.setAdapter(homeAdapter);
                        }
                        if (topicBean.data.size() > 0) {
                            lastDataTime = StringsUtil.getStringDate(topicBean.data
                                    .get(topicBean.data.size() - 1).CreateDate);
                        }
                    } else {
                        WeiShootToast.makeErrorText(getActivity(), topicBean.result.ResultMsg,
                                WeiShootToast.LENGTH_SHORT).show();
                    }
                } else {
                    WeiShootToast.makeErrorText(getActivity(), getString(R.string.http_timeout),
                            WeiShootToast.LENGTH_SHORT).show();
                }
            }
        });

    }

    /**
     * 获取广告
     */
    private void requestGetAd() {
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("type", "newtop");
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.GetAd, params, new RequestCallBack<Object>() {

            @Override
            public void onFailure(HttpException e, String s) {
                e.printStackTrace();
            }

            @Override
            public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                if (getActivity() == null) {
                    return;
                }
                String temp = (String) objectResponseInfo.result;
                advertisingBean = new Gson().fromJson(temp, new TypeToken<AdvertisingBean>() {
                }.getType());
                if (advertisingBean != null && advertisingBean.result != null) {
                    if ("200".equals(advertisingBean.result.ResultCode)) {
                        View picView = View.inflate(getActivity(), R.layout.view_pic_market, null);
                        RelativeLayout layout_ad = (RelativeLayout) picView
                                .findViewById(R.id.layout_ad);
                        layout_pointAll = (LinearLayout) picView.findViewById(R.id.layout_pointAll);
                        gallery_ad = (HomeAdCycleGallery) picView.findViewById(R.id.gallery_ad);
                        if (StaticInfo.widthPixels == 0) {
                            DisplayMetrics mDisplayMetrics = new DisplayMetrics();
                            getActivity().getWindowManager().getDefaultDisplay()
                                    .getMetrics(mDisplayMetrics);
                            StaticInfo.widthPixels = mDisplayMetrics.widthPixels;
                        }
                        int ADHeight = (int) (StaticInfo.widthPixels * Constant.AD_SIZE);
                        int tempHeight = (int) DimensionPixelUtil.getDimensionPixelSize(1, 5,
                                getActivity());
                        LinearLayout.LayoutParams lyp1 = new LinearLayout.LayoutParams(
                                RelativeLayout.LayoutParams.FILL_PARENT, ADHeight + tempHeight);
                        LinearLayout.LayoutParams lyp2 = new LinearLayout.LayoutParams(
                                RelativeLayout.LayoutParams.FILL_PARENT, ADHeight);
                        layout_ad.setLayoutParams(lyp1);
                        gallery_ad.setLayoutParams(lyp2);
                        gallery_ad.setSoundEffectsEnabled(false);
                        homeListView.addHeaderView(picView);
                        adCycleGalleryAdapter = new HomeAdCycleGalleryAdapter(getActivity(),
                                advertisingBean.data, StaticInfo.widthPixels);
                        addPointView(advertisingBean.data.size());
                        gallery_ad.setAdapter(adCycleGalleryAdapter);
                        gallery_ad.setSelection(adCycleGalleryAdapter.getCount() / 2);
                        gallery_ad.setOnItemSelectedListener(FragmentHome.this);
                        gallery_ad.setOnItemClickListener(new OnItemClickListener() {

                            @Override
                            public void onItemClick(AdapterView<?> parent, View view, int position,
                                    long id) {

                                ADBean adBea = (ADBean) advertisingBean.data.get(position
                                        % advertisingBean.data.size());
                                Intent intent = new Intent(getActivity(), WeiShootWebActiivty.class);
                                intent.putExtra("url", adBea.ALink);
                                startActivity(intent);
                            }
                        });
                        if (advertisingBean.data.size() > 1) {
                            gallery_ad.startSwitchTimer();// 开启轮偱
                        }
                    } else {
                    }
                } else {
                }
            }
        });

    }

    /**
     * 发微摄
     */
    private void requestAddTopic(final ReqUploadBean uploadBean) {
        progressLoading();
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("UCode", UserInfo.getInstance(getActivity()).getUserUCode());
        params.addBodyParameter("Title", uploadBean.str_Title);
        params.addBodyParameter("Mark", uploadBean.str_Mark);
        params.addBodyParameter("TType", "1");
        params.addBodyParameter("CreateFrom", HttpUrl.tokenkey);
        params.addBodyParameter("SCode", uploadBean.picSortBean.SCode);
        params.addBodyParameter("PicAddress", uploadBean.str_PicAddress);
        params.addBodyParameter("Coordinate", uploadBean.str_Coordinate);
        params.addBodyParameter("NickName", UserInfo.getInstance(getActivity()).getUserNickName());
        params.addBodyParameter("IsSale", uploadBean.str_IsSale);
        for (int i = 0; i < uploadBean.uploadPic.size(); i++) {
            params.addBodyParameter(i + "", new File(uploadBean.uploadPic.get(i)));
        }
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.AddTopic, params, new RequestCallBack<Object>() {

            @Override
            public void onFailure(HttpException e, String s) {
                e.printStackTrace();
                progressLoadingClose();
                WeiShootToast.makeErrorText(getActivity(), getString(R.string.http_timeout),
                        WeiShootToast.LENGTH_SHORT).show();
            }

            @Override
            public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                progressLoadingClose();
                String temp = (String) objectResponseInfo.result;
                UploadResultBean resultBean = new Gson().fromJson(temp,
                        new TypeToken<UploadResultBean>() {
                        }.getType());
                if (resultBean != null && resultBean.result != null) {
                    if ("200".equals(resultBean.result.ResultCode)) {
                        resultBean.data.PicSort = uploadBean.picSortBean.Sort;
                        resultBean.data.UserHead = UserInfo.getInstance(getActivity())
                                .getUserHead();
                        resultBean.data.CreateFrom = "Android客户端";
                        homeAdapter.addData(resultBean.data);
                    } else {
                        WeiShootToast.makeErrorText(getActivity(), resultBean.result.ResultMsg,
                                WeiShootToast.LENGTH_SHORT).show();
                    }
                } else {
                    WeiShootToast.makeErrorText(getActivity(), getString(R.string.http_timeout),
                            WeiShootToast.LENGTH_SHORT).show();
                }
            }
        });

    }
}
