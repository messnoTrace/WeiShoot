
package com.NationalPhotograpy.weishoot.activity.registered;

import java.io.File;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.os.Bundle;
import android.util.FloatMath;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.NationalPhotograpy.weishoot.R;
import com.NationalPhotograpy.weishoot.activity.BaseActivity;
import com.NationalPhotograpy.weishoot.net.HttpUrl;
import com.NationalPhotograpy.weishoot.storage.Constant;
import com.NationalPhotograpy.weishoot.storage.SharePreManager;
import com.NationalPhotograpy.weishoot.utils.BitmapUtils1;
import com.NationalPhotograpy.weishoot.utils.DimensionPixelUtil;
import com.NationalPhotograpy.weishoot.utils.StringsUtil;
import com.NationalPhotograpy.weishoot.utils.UserInfo.UserInfo;
import com.NationalPhotograpy.weishoot.view.ClipView;
import com.NationalPhotograpy.weishoot.view.MyToast;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.nostra13.universalimageloader.core.ImageLoader;

/**
 * 裁剪头像
 */
@SuppressLint("FloatMath")
public class ProcessHeadActivity extends BaseActivity implements OnClickListener, OnTouchListener {

    private LinearLayout layout_back;

    private Button btn_right;

    private ImageView src_pic;

    private ClipView clipview;

    private Matrix matrix = new Matrix();

    private Matrix savedMatrix = new Matrix();

    private final int NONE = 0;

    private final int DRAG = 1;

    private final int ZOOM = 2;

    private int mode = NONE;

    private PointF start = new PointF();

    private PointF mid = new PointF();

    private float oldDist = 1f;

    private RelativeLayout layout_clip;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.at_process_head);
        initView();
        initData();
        setListener();
    }

    private void initView() {
        layout_back = (LinearLayout) findViewById(R.id.layout_back);
        btn_right = (Button) findViewById(R.id.btn_right);
        src_pic = (ImageView) findViewById(R.id.src_pic);
        clipview = (ClipView) findViewById(R.id.clipview);
        layout_clip = (RelativeLayout) findViewById(R.id.layout_clip);
    }

    private void initData() {
        String picUri = getIntent().getStringExtra("picUri");
        ImageLoader.getInstance().displayImage("file://" + picUri, src_pic);
    }

    private void setListener() {
        layout_back.setOnClickListener(this);
        btn_right.setOnClickListener(this);
        src_pic.setOnTouchListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.layout_back:
                finish();
                break;
            case R.id.btn_right:
                process();
                break;

            default:
                break;
        }
    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        ImageView view = (ImageView) v;
        switch (event.getAction() & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN:
                savedMatrix.set(matrix);
                // 設置初始點位置
                start.set(event.getX(), event.getY());
                mode = DRAG;
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
                oldDist = spacing(event);
                if (oldDist > 10f) {
                    savedMatrix.set(matrix);
                    midPoint(mid, event);
                    mode = ZOOM;
                }
                break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP:
                mode = NONE;
                break;
            case MotionEvent.ACTION_MOVE:
                if (mode == DRAG) {
                    matrix.set(savedMatrix);
                    matrix.postTranslate(event.getX() - start.x, event.getY() - start.y);
                } else if (mode == ZOOM) {
                    float newDist = spacing(event);
                    if (newDist > 10f) {
                        matrix.set(savedMatrix);
                        float scale = newDist / oldDist;
                        System.out.println(scale);// 原图和新图比例
                        matrix.postScale(scale, scale, mid.x, mid.y);
                    }
                }
                break;
        }

        view.setImageMatrix(matrix);
        return true;
    }

    private float spacing(MotionEvent event) {
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
        return FloatMath.sqrt(x * x + y * y);
    }

    private void midPoint(PointF point, MotionEvent event) {
        float x = event.getX(0) + event.getX(1);
        float y = event.getY(0) + event.getY(1);
        point.set(x / 2, y / 2);
    }

    public void process() {
        Bitmap fianBitmap = getBitmap();
        String picUri = BitmapUtils1.saveBitmap(fianBitmap);
        requestAddTopic(picUri);
    }

    /* 获取矩形区域内的截图 */
    private Bitmap getBitmap() {
        Bitmap screenShoot = takeScreenShot();
        clipview = (ClipView) this.findViewById(R.id.clipview);
        int rect360 = (int) DimensionPixelUtil.getDimensionPixelSize(1, 280, this);
        int tempWidth = (clipview.getWidth() - rect360) / 2;
        int tempHeight = (clipview.getHeight() - rect360) / 2;
        Bitmap finalBitmap = Bitmap.createBitmap(screenShoot, tempWidth, tempHeight,
                clipview.getWidth() - 2 * tempWidth, clipview.getHeight() - 2 * tempHeight);
        return finalBitmap;
    }

    // 获取Activity的截屏
    private Bitmap takeScreenShot() {
        layout_clip.setDrawingCacheEnabled(true);
        layout_clip.buildDrawingCache();
        return layout_clip.getDrawingCache();
    }

    /**
     * 上传头像
     */
    private void requestAddTopic(final String picUri) {
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("UCode", UserInfo.getInstance(this).getUserUCode());
        params.addBodyParameter("picUri", new File(picUri));
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.ModifyAvatar, params,
                new RequestCallBack<Object>() {

                    @Override
                    public void onFailure(HttpException e, String s) {
                        e.printStackTrace();
                        MyToast.makeText(ProcessHeadActivity.this,
                                getString(R.string.http_timeout), Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                        String temp = (String) objectResponseInfo.result;
                        String resultCode = "-1";
                        String resultMsg = "";
                        if (temp != null) {
                            try {
                                JSONObject jsonObj = new JSONObject(temp);
                                JSONObject resultJson = jsonObj.getJSONObject("result");
                                resultCode = resultJson.optString("ResultCode");
                                resultMsg = resultJson.optString("ResultMsg");
                                if ("200".equals(resultCode)) {
                                    SharePreManager.getInstance(ProcessHeadActivity.this)
                                            .setUserHeadTimestamp(StringsUtil.getTimeFormat());
                                    Intent intent = new Intent();
                                    intent.putExtra("picUri", picUri);
                                    setResult(Constant.RESULT_HEAD, intent);
                                    finish();
                                } else {
                                    MyToast.makeText(ProcessHeadActivity.this, resultMsg,
                                            Toast.LENGTH_SHORT).show();
                                }

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        } else {
                            MyToast.makeText(ProcessHeadActivity.this,
                                    getString(R.string.http_timeout), Toast.LENGTH_SHORT).show();
                        }

                    }
                });

    }
}
