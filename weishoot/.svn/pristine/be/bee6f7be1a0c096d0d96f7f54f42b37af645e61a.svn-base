
package com.NationalPhotograpy.weishoot.activity.photograph;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.FloatMath;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.NationalPhotograpy.weishoot.R;
import com.NationalPhotograpy.weishoot.activity.BaseActivity;
import com.NationalPhotograpy.weishoot.adapter.photograph.ScreenshotPictorialAdapter;
import com.NationalPhotograpy.weishoot.bean.PicTemplateChildBean;
import com.NationalPhotograpy.weishoot.bean.PicTemplateChildBean.PicTemplateChild;
import com.NationalPhotograpy.weishoot.net.HttpUrl;
import com.NationalPhotograpy.weishoot.storage.Constant;
import com.NationalPhotograpy.weishoot.utils.BitmapUtils1;
import com.NationalPhotograpy.weishoot.utils.DimensionPixelUtil;
import com.NationalPhotograpy.weishoot.view.ClipPictorialView;
import com.NationalPhotograpy.weishoot.view.HorizontalListView;
import com.NationalPhotograpy.weishoot.view.MyToast;
import com.NationalPhotograpy.weishoot.view.ProgressiveDialog;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;

/**
 * 裁剪封面
 */
@SuppressLint("FloatMath")
public class ScreenshotPictorialActivity extends BaseActivity implements OnClickListener,
        OnTouchListener {

    private LinearLayout layout_back;

    private Button btn_right;

    private ImageView src_pic;

    private ClipPictorialView clipview;

    private Matrix matrix = new Matrix();

    private Matrix savedMatrix = new Matrix();

    private final int NONE = 0;

    private final int DRAG = 1;

    private final int ZOOM = 2;

    private int mode = NONE;

    private PointF start = new PointF();

    private PointF mid = new PointF();

    private float oldDist = 1f;

    private RelativeLayout layout_clip;

    private HorizontalListView listview_temp;

    private String Cid;

    private ImageLoader imageLoader;

    private DisplayImageOptions mOptionsPic;

    private PicTemplateChildBean picTempBean;

    private PicTemplateChild picTemplateChild;

    private ProgressiveDialog progressDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.at_screenshot_pictorial);
        initView();
        initData();
        setListener();
    }

    private void initView() {
        progressDialog = new ProgressiveDialog(this);
        layout_back = (LinearLayout) findViewById(R.id.layout_back);
        btn_right = (Button) findViewById(R.id.btn_right);
        src_pic = (ImageView) findViewById(R.id.src_pic);
        clipview = (ClipPictorialView) findViewById(R.id.clipview);
        layout_clip = (RelativeLayout) findViewById(R.id.layout_clip);
        listview_temp = (HorizontalListView) findViewById(R.id.listview_temp);
        this.imageLoader = ImageLoader.getInstance();
        mOptionsPic = new DisplayImageOptions.Builder().cacheInMemory(true).cacheOnDisc(true)
                .showImageForEmptyUri(R.drawable.ic_stub).build();
    }

    private void initData() {
        progressDialog.show();
        String picUri = getIntent().getStringExtra("picUri");
        Cid = getIntent().getStringExtra("Cid");
        imageLoader.displayImage("file://" + picUri, src_pic);
        requestGetCoverPicByClass();
        mmmhandler.sendEmptyMessageDelayed(1, 3000);
    }

    private void setListener() {
        layout_back.setOnClickListener(this);
        btn_right.setOnClickListener(this);
        src_pic.setOnTouchListener(this);
        listview_temp.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                picTemplateChild = picTempBean.data.get(position);
                imageLoader.displayImage(picTemplateChild.PicUrlpng, clipview, mOptionsPic);
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.layout_back:
                finish();
                break;
            case R.id.btn_right:
                if (picTemplateChild == null) {
                    MyToast.makeText(ScreenshotPictorialActivity.this, "请选择一种画报风格",
                            Toast.LENGTH_SHORT).show();
                    return;
                }
                process();
                break;

            default:
                break;
        }
    }

    @Override
    public boolean onTouch(View v, MotionEvent event) {
        ImageView view = (ImageView) v;
        switch (event.getAction() & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN:
                savedMatrix.set(matrix);
                // 設置初始點位置
                start.set(event.getX(), event.getY());
                mode = DRAG;
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
                oldDist = spacing(event);
                if (oldDist > 10f) {
                    savedMatrix.set(matrix);
                    midPoint(mid, event);
                    mode = ZOOM;
                }
                break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP:
                mode = NONE;
                break;
            case MotionEvent.ACTION_MOVE:
                if (mode == DRAG) {
                    matrix.set(savedMatrix);
                    matrix.postTranslate(event.getX() - start.x, event.getY() - start.y);
                } else if (mode == ZOOM) {
                    float newDist = spacing(event);
                    if (newDist > 10f) {
                        matrix.set(savedMatrix);
                        float scale = newDist / oldDist;
                        System.out.println(scale);// 原图和新图比例
                        matrix.postScale(scale, scale, mid.x, mid.y);
                    }
                }
                break;
        }

        view.setImageMatrix(matrix);
        return true;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == Constant.RESULT_UPLOAD_SUCCESS) {
            setResult(resultCode, data);
            finish();
        }
    }

    private float spacing(MotionEvent event) {
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
        return FloatMath.sqrt(x * x + y * y);
    }

    private void midPoint(PointF point, MotionEvent event) {
        float x = event.getX(0) + event.getX(1);
        float y = event.getY(0) + event.getY(1);
        point.set(x / 2, y / 2);
    }

    public void process() {
        progressDialog.show();
        mhandler.sendEmptyMessageDelayed(1, 100);
    }

    private Handler mhandler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            Bitmap clipLayoutBitmap = getLayouyClipBitmap();
            String picLayoutUri = BitmapUtils1.saveBitmap(clipLayoutBitmap);
            Bitmap clipViewBitmap = getViewClipBitmap();
            String picViewUri = BitmapUtils1.saveBitmap(clipViewBitmap);
            Message mmsg = new Message();
            mmsg.obj = picLayoutUri + ",,," + picViewUri;
            mmhandler.sendMessageDelayed(mmsg, 200);
        };
    };

    private Handler mmhandler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            progressDialog.dismiss();
            String[] array = ((String) (msg.obj)).split(",,,");
            Intent it = new Intent(ScreenshotPictorialActivity.this, CreatePictorialActivity.class);
            it.putExtra("picLayoutUri", array[0]);
            it.putExtra("picViewUri", array[1]);
            it.putExtra("CPId", picTemplateChild.CPId);
            startActivityForResult(it, 1);
        };
    };

    private Handler mmmhandler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            progressDialog.dismiss();
        };
    };

    /* 获取矩形区域内的截图 */
    private Bitmap getLayouyClipBitmap() {
        layout_clip.setDrawingCacheEnabled(true);
        layout_clip.buildDrawingCache();
        clipview = (ClipPictorialView) this.findViewById(R.id.clipview);
        int tempHeigntTop = (int) DimensionPixelUtil.getDimensionPixelSize(1, 50, this);
        int tempWidth = (int) DimensionPixelUtil.getDimensionPixelSize(1, 20, this);
        int rectWidth = clipview.getWidth() - tempWidth * 2;
        int rectHeight = (int) (rectWidth * Constant.PICTORIAL_SIZE);
        Bitmap finalBitmap = Bitmap.createBitmap(layout_clip.getDrawingCache(), tempWidth,
                tempHeigntTop, rectWidth, rectHeight);
        layout_clip.setDrawingCacheEnabled(false);
        return finalBitmap;
    }

    /* 获取矩形区域内的截图 */
    private Bitmap getViewClipBitmap() {
        layout_clip.setDrawingCacheEnabled(true);
        layout_clip.buildDrawingCache();
        clipview = (ClipPictorialView) this.findViewById(R.id.clipview);
        int tempHeigntTop = (int) DimensionPixelUtil.getDimensionPixelSize(1, 50, this);
        int tempWidth = (int) DimensionPixelUtil.getDimensionPixelSize(1, 20, this);
        int rectWidth = clipview.getWidth() - tempWidth * 2;
        int rectHeight = (int) (rectWidth * Constant.PICTORIAL_SIZE);
        Bitmap finalBitmap = Bitmap.createBitmap(layout_clip.getDrawingCache(), tempWidth,
                tempHeigntTop, rectWidth, rectHeight);
        return finalBitmap;
    }

    /**
     * 根据分类编号获取封面
     */
    private void requestGetCoverPicByClass() {
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("Cid", Cid);
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.GetCoverPicByClass, params,
                new RequestCallBack<Object>() {

                    @Override
                    public void onFailure(HttpException e, String s) {
                        e.printStackTrace();
                        MyToast.makeText(ScreenshotPictorialActivity.this,
                                getString(R.string.http_timeout), Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                        String temp = (String) objectResponseInfo.result;
                        picTempBean = new Gson().fromJson(temp,
                                new TypeToken<PicTemplateChildBean>() {
                                }.getType());
                        if (picTempBean != null && picTempBean.result != null) {
                            if ("200".equals(picTempBean.result.ResultCode)) {
                                int tempHeigntTop = (int) DimensionPixelUtil.getDimensionPixelSize(
                                        1, 53, ScreenshotPictorialActivity.this);
                                int tempWidth = (int) DimensionPixelUtil.getDimensionPixelSize(1,
                                        20, ScreenshotPictorialActivity.this);
                                int rectWidth = layout_clip.getWidth() - tempWidth * 2;
                                int rectHeight = (int) (rectWidth * Constant.PICTORIAL_SIZE);
                                int picTempLayoutHeight = layout_clip.getHeight() - rectHeight
                                        - tempHeigntTop;
                                RelativeLayout.LayoutParams lyp = new RelativeLayout.LayoutParams(
                                        RelativeLayout.LayoutParams.FILL_PARENT,
                                        picTempLayoutHeight);
                                lyp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);
                                listview_temp.setLayoutParams(lyp);
                                ScreenshotPictorialAdapter adapter = new ScreenshotPictorialAdapter(
                                        ScreenshotPictorialActivity.this, picTempBean.data,
                                        picTempLayoutHeight);
                                listview_temp.setAdapter(adapter);
                            } else {
                                MyToast.makeText(ScreenshotPictorialActivity.this,
                                        picTempBean.result.ResultMsg, Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            MyToast.makeText(ScreenshotPictorialActivity.this,
                                    getString(R.string.http_timeout), Toast.LENGTH_SHORT).show();
                        }
                    }
                });

    }
}
