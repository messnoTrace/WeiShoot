
package com.NationalPhotograpy.weishoot.activity;

import io.rong.imkit.RongIM;
import io.rong.imkit.RongIMClientWrapper;
import io.rong.imkit.fragment.ConversationListFragment;
import io.rong.imlib.RongIMClient.ConnectCallback;
import io.rong.imlib.RongIMClient.ConnectionStatusListener;
import io.rong.imlib.RongIMClient.ErrorCode;
import io.rong.imlib.RongIMClient.OnReceiveMessageListener;
import io.rong.imlib.model.Conversation;
import io.rong.imlib.model.Message;
import io.rong.imlib.model.UserInfo;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import cn.jpush.android.api.JPushInterface;
import cn.sharesdk.framework.ShareSDK;

import com.NationalPhotograpy.weishoot.R;
import com.NationalPhotograpy.weishoot.activity.photograph.PhotoHomeActivity;
import com.NationalPhotograpy.weishoot.activity.quanzi.MutualConcernActivity;
import com.NationalPhotograpy.weishoot.activity.registered.LoginActivity;
import com.NationalPhotograpy.weishoot.bean.MutualConcernBean;
import com.NationalPhotograpy.weishoot.bean.UploadResultBean;
import com.NationalPhotograpy.weishoot.bean.ZambiaBean;
import com.NationalPhotograpy.weishoot.fragment.FragmentFind;
import com.NationalPhotograpy.weishoot.fragment.FragmentHome;
import com.NationalPhotograpy.weishoot.fragment.FragmentMarket;
import com.NationalPhotograpy.weishoot.net.HttpUrl;
import com.NationalPhotograpy.weishoot.push.PushUtil;
import com.NationalPhotograpy.weishoot.storage.SharePreManager;
import com.NationalPhotograpy.weishoot.storage.StaticInfo;
import com.NationalPhotograpy.weishoot.utils.DimensionPixelUtil;
import com.NationalPhotograpy.weishoot.utils.StringsUtil;
import com.NationalPhotograpy.weishoot.utils.WeiShootToast;
import com.NationalPhotograpy.weishoot.view.FriendsAddPopupWindow;
import com.NationalPhotograpy.weishoot.view.StyleAlertDialog;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.DbUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.DbException;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;

public class MainActivity extends BaseActivity implements OnClickListener {

    private ImageButton ibtn_sy, ibtn_qz, ibtn_zx, ibtn_fx, ibtn_sc;

    /**
     * 当前fragment的index
     */
    private int CurrentFragment;

    private List<Fragment> fragments;

    private final int FR_SY = 0;// 首页

    private final int FR_QZ = 1;// 圈子

    private final int FR_FX = 2;// 发现

    private final int FR_SC = 3;// 商城

    private long mExitTime;

    private Button btn_lianxiren, btn_quanzi_right;

    private RelativeLayout layout_top;

    private boolean isConnectionStatus;

    private DbUtils attenDB;

    public static UploadResultBean resultBean;

    public static String intentResult;

    public FragmentMarket fragmentMarket;

    public ImageView iv_sendMessageState;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initData();
        setListener();
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (sp.userIsLogin() && !StaticInfo.OnceFlag) {
            StaticInfo.OnceFlag = true;
            requestGetFriendByCode();
            requestGetToken();
            initPush();
        }
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        intentResult = intent.getStringExtra("Result");
        resultBean = (UploadResultBean) intent.getSerializableExtra("ResultBean");
        if ("RESULT_UPLOAD_SUCCESS".equals(intentResult)) {
            checkBtn(ibtn_sy);
            addFragment(FR_SY);
        } else if ("WEBVIEW".equals(intentResult)) {
            checkBtn(ibtn_sc);
            addFragment(FR_SC);
        }
    }

    private void initView() {
        ibtn_sy = (ImageButton) findViewById(R.id.ibtn_sy);
        ibtn_qz = (ImageButton) findViewById(R.id.ibtn_qz);
        ibtn_zx = (ImageButton) findViewById(R.id.ibtn_zx);
        ibtn_fx = (ImageButton) findViewById(R.id.ibtn_fx);
        ibtn_sc = (ImageButton) findViewById(R.id.ibtn_sc);

        layout_top = (RelativeLayout) findViewById(R.id.layout_top);
        layout_top.setVisibility(View.GONE);
        btn_lianxiren = (Button) findViewById(R.id.btn_lianxiren);
        btn_quanzi_right = (Button) findViewById(R.id.btn_quanzi_right);
        iv_sendMessageState = (ImageView) findViewById(R.id.iv_sendMessageState);
        attenDB = DbUtils.create(this, "user_attention");
        attenDB.configAllowTransaction(true);
    }

    private void initData() {
        // 添加fragment
        fragments = new ArrayList<Fragment>();
        fragments.add(new FragmentHome());
        fragments.add(initConversationListFragment());
        fragments.add(new FragmentFind());
        fragmentMarket = new FragmentMarket();
        fragments.add(fragmentMarket);

        ibtn_sy.setSelected(true);
        addFragment(FR_SY);
        ShareSDK.initSDK(this);
        // 读取联系人数据库
        QueryAttention();
        requestGetNewVersion();
    }

    private void QueryAttention() {
        try {
            List<ZambiaBean> tempBean = attenDB.findAll(ZambiaBean.class);
            if (tempBean != null) {
                StaticInfo.mutualConcernList.addAll(tempBean);
            }
        } catch (DbException e) {
            e.printStackTrace();
        }
    }

    private void setListener() {
        ibtn_sy.setOnClickListener(this);
        ibtn_qz.setOnClickListener(this);
        ibtn_zx.setOnClickListener(this);
        ibtn_fx.setOnClickListener(this);
        ibtn_sc.setOnClickListener(this);
        btn_lianxiren.setOnClickListener(this);
        btn_quanzi_right.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        Intent it;
        switch (v.getId()) {
            case R.id.ibtn_sy:
                if (ibtn_sy.isSelected())
                    return;
                checkBtn(v);
                addFragment(FR_SY);
                break;
            case R.id.ibtn_qz:
                if (ibtn_qz.isSelected())
                    return;
                if (!com.NationalPhotograpy.weishoot.utils.UserInfo.UserInfo.getInstance(
                        MainActivity.this).isLogin()) {
                    it = new Intent(MainActivity.this, LoginActivity.class);
                    startActivity(it);
                    return;
                }
                if (isConnectionStatus) {
                    setRongIMConnect();
                }
                checkBtn(v);
                addFragment(FR_QZ);
                layout_top.setVisibility(View.VISIBLE);
                iv_sendMessageState.setVisibility(View.GONE);
                break;
            case R.id.ibtn_zx:
                if (!com.NationalPhotograpy.weishoot.utils.UserInfo.UserInfo.getInstance(
                        MainActivity.this).isLogin()) {
                    it = new Intent(MainActivity.this, LoginActivity.class);
                    startActivity(it);
                    return;
                }
                it = new Intent(MainActivity.this, PhotoHomeActivity.class);
                startActivity(it);
                overridePendingTransition(R.anim.bottom_in, R.anim.top_out);
                break;
            case R.id.ibtn_fx:
                if (ibtn_fx.isSelected())
                    return;

                checkBtn(v);
                addFragment(FR_FX);
                break;
            case R.id.ibtn_sc:
                if (ibtn_sc.isSelected())
                    return;
                checkBtn(v);
                addFragment(FR_SC);
                break;
            case R.id.btn_lianxiren:
                it = new Intent(MainActivity.this, MutualConcernActivity.class);
                startActivity(it);
                break;
            case R.id.btn_quanzi_right:
                FriendsAddPopupWindow sharePopWindow = new FriendsAddPopupWindow(MainActivity.this);
                if (sharePopWindow.isShowing()) {
                    sharePopWindow.dismiss();
                } else {
                    sharePopWindow.showAtLocation(btn_quanzi_right, Gravity.TOP | Gravity.RIGHT, 0,
                            (int) DimensionPixelUtil
                                    .getDimensionPixelSize(1, 77, MainActivity.this));
                }
                break;
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            if (ibtn_sc.isSelected() && fragmentMarket != null
                    && fragmentMarket.mwebview.canGoBack()) {
                fragmentMarket.mwebview.goBack();
                return true;
            }
        }

        if (keyCode == KeyEvent.KEYCODE_BACK) {
            if ((System.currentTimeMillis() - mExitTime) > 2000) {
                WeiShootToast.makeErrorText(MainActivity.this, "再按一次退出程序",
                        WeiShootToast.LENGTH_SHORT).show();
                mExitTime = System.currentTimeMillis();
                return false;
            } else {
                RongIM.getInstance().logout();
                StaticInfo.OnceFlag = false;
                finish();
            }
        }
        return super.onKeyDown(keyCode, event);
    }

    private void checkBtn(View view) {
        ibtn_sy.setSelected(false);
        ibtn_qz.setSelected(false);
        ibtn_zx.setSelected(false);
        ibtn_fx.setSelected(false);
        ibtn_sc.setSelected(false);
        layout_top.setVisibility(View.GONE);
        view.setSelected(true);

    }

    class MyReceiveMessageListener implements OnReceiveMessageListener {

        /**
         * 收到消息的处理。
         * 
         * @param message 收到的消息实体。
         * @param left 剩余未拉取消息数目。
         * @return 收到消息是否处理完成，true 表示走自已的处理方式，false 走融云默认处理方式。
         */
        @Override
        public boolean onReceived(Message message, int left) {
            // 开发者根据自己需求自行处理
            iv_sendMessageState.setVisibility(View.VISIBLE);
            return false;
        }
    }

    private void addFragment(int temp) {
        Fragment fragment = fragments.get(temp);
        FragmentTransaction ft = obtainFragmentTransaction(temp);
        fragments.get(CurrentFragment).onPause(); // 暂停当前tab
        fragments.get(CurrentFragment).onStop(); // 暂停当前tab
        if (fragment.isAdded()) {
            fragment.onStart(); // 启动目标tab的onStart()
            fragment.onResume(); // 启动目标tab的onResume()
        } else {
            ft.add(R.id.myfragment, fragment);
        }
        showTab(temp); // 显示目标tab
        ft.commit();
    }

    /**
     * 获取一个带动画的FragmentTransaction
     */
    private FragmentTransaction obtainFragmentTransaction(int index) {
        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        return ft;
    }

    /**
     * 切换tab
     */
    private void showTab(int idx) {
        for (int i = 0; i < fragments.size(); i++) {
            Fragment fragment = fragments.get(i);
            FragmentTransaction ft = obtainFragmentTransaction(idx);
            if (idx == i) {
                ft.show(fragment);
            } else {
                ft.hide(fragment);
            }
            ft.commit();
        }
        CurrentFragment = idx; // 更新目标tab为当前tab
    }

    private void showUpdateDialog(String updateContent, final String updateUrl) {
        final StyleAlertDialog warnAlert = new StyleAlertDialog(this, R.style.MyDialog);
        // 没有网络
        warnAlert.setTitleMsg("版本更新");
        warnAlert.setCancelable(true);
        warnAlert.setContent(updateContent);
        warnAlert.setPositiveButton("更新", new OnClickListener() {
            @Override
            public void onClick(View v) {
                warnAlert.dismiss();
                // 下载操作
                Uri uri = Uri.parse(updateUrl);
                Intent it = new Intent(Intent.ACTION_VIEW, uri);
                startActivity(it);
            }
        });
        warnAlert.setNegativeButton("取消", new OnClickListener() {

            @Override
            public void onClick(View v) {
                warnAlert.dismiss();
            }
        });
        warnAlert.show();
    }

    /**
     * initPush(初始化推送)
     */
    private void initPush() {
        JPushInterface.setDebugMode(false); // 设置开启日志,发布时请关闭日志
        JPushInterface.init(this);
        // 异步设置推送别名
        new Thread(new Runnable() {
            public void run() {
                PushUtil pu = new PushUtil();
                pu.setAlias(MainActivity.this, SharePreManager.getInstance(MainActivity.this)
                        .getUserUCode());
                if (!SharePreManager.getInstance(MainActivity.this).getJpushState()) {
                    JPushInterface.stopPush(MainActivity.this);
                }
            }
        }).start();
    }

    /**
     * 封装的代码加载融云的会话列表的 fragment
     * 
     * @return
     */
    private Fragment initConversationListFragment() {
        ConversationListFragment fragment = new ConversationListFragment();
        Uri uri = Uri
                .parse("rong://" + getApplicationInfo().packageName)
                .buildUpon()
                .appendPath("conversationlist")
                .appendQueryParameter(Conversation.ConversationType.PRIVATE.getName(), "false")
                // 设置私聊会话是否聚合显示
                .appendQueryParameter(Conversation.ConversationType.GROUP.getName(), "true")
                .appendQueryParameter(Conversation.ConversationType.DISCUSSION.getName(), "false")
                .appendQueryParameter(Conversation.ConversationType.SYSTEM.getName(), "true")
                .build();
        fragment.setUri(uri);
        return fragment;
    }

    /**
     * 获取融云Token
     */
    private void requestGetToken() {
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("uCode",
                SharePreManager.getInstance(this).getUserUCode().replace("-", ""));
        params.addBodyParameter("nickName", SharePreManager.getInstance(this).getUserNickName());
        params.addBodyParameter("userHead", SharePreManager.getInstance(this).getUserHead());
        httpUtils.send(HttpMethod.POST, HttpUrl.GetToken, params, new RequestCallBack<Object>() {

            @Override
            public void onFailure(HttpException e, String s) {
                e.printStackTrace();
            }

            @Override
            public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                String temp = (String) objectResponseInfo.result;
                String resultCode = "-1";
                try {
                    JSONObject jsonObj = new JSONObject(temp);
                    resultCode = jsonObj.optString("code");
                    if ("200".equals(resultCode)) {
                        SharePreManager.getInstance(MainActivity.this).setUserToken(
                                jsonObj.optString("token"));
                        setRongIMConnect();
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });

    }

    private void setRongIMConnect() {
        RongIM.connect(SharePreManager.getInstance(MainActivity.this).getUserToken(),
                new ConnectCallback() {

                    @Override
                    public void onError(ErrorCode arg0) {
                        System.out.println(arg0);
                    }

                    @Override
                    public void onSuccess(String userId) {
                        isConnectionStatus = false;
                        setUserInfoProvider();
                        ConnectionStatus();
                        RongIM.setOnReceiveMessageListener(new MyReceiveMessageListener());

                    }

                    @Override
                    public void onTokenIncorrect() {

                    }
                });
    }

    private void setUserInfoProvider() {
        RongIM.setUserInfoProvider(new RongIM.UserInfoProvider() {

            @Override
            public UserInfo getUserInfo(String userId) {

                return findUserById(userId);
            }

        }, true);
    }

    private void ConnectionStatus() {
        if (RongIM.getInstance() != null && RongIM.getInstance().getRongIMClient() != null) {
            RongIM.getInstance().getRongIMClient();
            /**
             * 设置连接状态变化的监听器.
             */
            RongIMClientWrapper.setConnectionStatusListener(new ConnectionStatusListener() {

                @Override
                public void onChanged(ConnectionStatus connectionStatus) {
                    switch (connectionStatus) {

                        case CONNECTED:// 连接成功。
                            break;
                        case DISCONNECTED:// 断开连接。

                            break;
                        case CONNECTING:// 连接中。
                            break;
                        case NETWORK_UNAVAILABLE:// 网络不可用。

                            break;
                        case KICKED_OFFLINE_BY_OTHER_CLIENT:// 用户账户在其他设备登录，本机会被踢掉线
                            isConnectionStatus = true;
                            break;
                    }
                }
            });
        }
    }

    private UserInfo findUserById(String userId) {
        UserInfo us = null;
        for (int i = 0; i < StaticInfo.mutualConcernList.size(); i++) {
            if (StaticInfo.mutualConcernList.get(i).UCode.replace("-", "").equals(userId)) {
                ZambiaBean tempBean = StaticInfo.mutualConcernList.get(i);
                us = new UserInfo(tempBean.UCode.replace("-", ""), tempBean.NickName,
                        Uri.parse(tempBean.UserHead));
            }
        }
        return us;
    }

    /**
     * 获取联系人
     */
    private void requestGetFriendByCode() {
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("UCode", SharePreManager.getInstance(this).getUserUCode());
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.GetFriendByCode, params,
                new RequestCallBack<Object>() {

                    @Override
                    public void onFailure(HttpException e, String s) {
                        e.printStackTrace();
                    }

                    @Override
                    public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                        String temp = (String) objectResponseInfo.result;
                        MutualConcernBean mutualBean = new Gson().fromJson(temp,
                                new TypeToken<MutualConcernBean>() {
                                }.getType());
                        if (mutualBean != null && mutualBean.result != null) {
                            if ("200".equals(mutualBean.result.ResultCode)) {
                                StaticInfo.mutualConcernList.add(new ZambiaBean(sp.getUserUCode()
                                        .replace("-", ""), sp.getUserNickName(), sp.getUserHead()));
                                StaticInfo.mutualConcernList.add(new ZambiaBean(
                                        "KEFU1440650315357", "微摄客服",
                                        "http://im.weishoot.com/Content/images/logokf.png"));
                                Set<ZambiaBean> zamSet = new HashSet(StaticInfo.mutualConcernList);
                                zamSet.addAll(mutualBean.data);
                                StaticInfo.mutualConcernList.clear();
                                StaticInfo.mutualConcernList.addAll(new ArrayList(zamSet));
                                setUserInfoProvider();
                                try {
                                    attenDB.deleteAll(ZambiaBean.class);
                                    attenDB.saveAll(StaticInfo.mutualConcernList);
                                } catch (DbException e) {
                                    e.printStackTrace();
                                }
                            } else {
                            }
                        } else {
                        }
                    }
                });

    }

    /**
     * 版本检测
     */
    private void requestGetNewVersion() {
        HttpUtils httpUtils = new HttpUtils(1000 * 20);
        RequestParams params = new RequestParams();
        params.addBodyParameter("TokenKey", HttpUrl.tokenkey);
        httpUtils.send(HttpMethod.POST, HttpUrl.GetNewVersion, params,
                new RequestCallBack<Object>() {

                    @Override
                    public void onFailure(HttpException e, String s) {
                        e.printStackTrace();
                    }

                    @Override
                    public void onSuccess(ResponseInfo<Object> objectResponseInfo) {
                        String temp = (String) objectResponseInfo.result;
                        // {"resultCode":"200","version":"3.1","url":"http://weishoot.com/DownLoad/weishoot.apk"}
                        try {
                            JSONObject jsonobj = new JSONObject(temp);
                            String resultCode = jsonobj.optString("resultCode");
                            String version = jsonobj.optString("version");
                            String url = jsonobj.optString("url");
                            if ("200".equals(resultCode)) {
                                String locatVersion = StringsUtil.getVersionName(MainActivity.this);
                                if (!locatVersion.equals(version)) {
                                    showUpdateDialog("", url);
                                }
                            } else {
                                // /
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });

    }

}
